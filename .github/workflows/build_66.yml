name: "Build kernel 6.6"

env:
  CONFIGURATION: "repos_android14-6.1.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig

      withKernelSU: ${{ matrix.repos.withKernelSU }}
        
    steps:
      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools repo gzip

      - name: "üí´ Get toolchains"
        run: |
          git clone --depth 1 https://github.com/xiangfeidexiaohuo/AKB
          cd AKB
          repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1-lts
          repo sync -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          rm -rf common .repo
          
      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        run: |
          cd AKB
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1
          mv $kernelName common
          rm -rf common/.git
          
      - name: "üòã Update KernelSU"
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          cd AKB
          rm -rf "./KernelSU" 2>/dev/null
          rm -rf "./drivers/kernelsu" 2>/dev/null
          if [ ! -d "./drivers/staging/kernelsu" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
            #git config --global user.email "bot@kernelsu.org"
            #git config --global user.name "KernelSUBot"
            #cd common/ && git add -A && git commit -a -m "Add KernelSU"
          fi

      - name: "üé∂ Build kernel"
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          cd AKB
          
          rm -rf ./common/arch/arm64/configs/gki_defconfig
          wget -P ./common/arch/arm64/configs/ https://raw.githubusercontent.com/xiangfeidexiaohuo/AKB/refs/heads/6.1/tmp/gki_defconfig
         
          # sed -i "1iCONFIG_LOCALVERSION=\"~ETO@Next\"\nCONFIG_NTFS3_FS=y\nCONFIG_CIFS=y" common/arch/arm64/configs/gki_defconfig
          # sed -i 's/=m/=y/g' common/arch/arm64/configs/gki_defconfig
          # sed -i 's/CONFIG_ZRAM=y/CONFIG_ZRAM=m\nCONFIG_ZSMALLOC=m/g' common/arch/arm64/configs/gki_defconfig
          # sed -i 's/# CONFIG_TCP_CONG_ADVANCED is not set/CONFIG_TCP_CONG_ADVANCED=y\nCONFIG_TCP_CONG_WESTWOOD=y\nCONFIG_TCP_CONG_BIC=y\nCONFIG_TCP_CONG_BBR=y\n# CONFIG_TCP_CONG_HTCP is not set/g' common/arch/arm64/configs/gki_defconfig
     
          echo "ÂÖ≥Èó≠È™åËØÅ"
          sed -i '/POST_DEFCONFIG_CMDS/d' common/build.config.gki
          
          sed -i '/bluetooth\/btbcm.ko/,+30d' common/modules.bzl
          sed -i '/6lowpan\/6lowpan.ko/,+25d' common/modules.bzl
          sed -i '/gzvm.ko/d' common/modules.bzl

 
          tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          rm -f dist/vmlinux dist/*.gz
          
      - name: "ü•∞ Pack artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.kernelName }}
          compression-level: 9
          path: AKB/dist
